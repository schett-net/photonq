{"version":3,"file":"673a9fafd0c8b6129935cde353645c7cf1aea0c1-2367b8db16ad03702acd.js","mappings":"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","sources":["webpack://photonq/../node_modules/@chakra-ui/form-control/dist/chunk-7COXQURZ.mjs","webpack://photonq/../node_modules/@chakra-ui/form-control/dist/chunk-WWJYOSXC.mjs","webpack://photonq/../node_modules/@chakra-ui/layout/dist/chunk-7OLJDQMT.mjs","webpack://photonq/../node_modules/react-hook-form/dist/index.esm.mjs"],"sourcesContent":["'use client'\nimport {\n  useFormControlContext,\n  useFormControlStyles\n} from \"./chunk-R42ZB7PB.mjs\";\n\n// src/form-label.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar FormLabel = forwardRef(function FormLabel2(passedProps, ref) {\n  var _a;\n  const styles = useStyleConfig(\"FormLabel\", passedProps);\n  const props = omitThemingProps(passedProps);\n  const {\n    className,\n    children,\n    requiredIndicator = /* @__PURE__ */ jsx(RequiredIndicator, {}),\n    optionalIndicator = null,\n    ...rest\n  } = props;\n  const field = useFormControlContext();\n  const ownProps = (_a = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _a : { ref, ...rest };\n  return /* @__PURE__ */ jsxs(\n    chakra.label,\n    {\n      ...ownProps,\n      className: cx(\"chakra-form__label\", props.className),\n      __css: {\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles\n      },\n      children: [\n        children,\n        (field == null ? void 0 : field.isRequired) ? requiredIndicator : optionalIndicator\n      ]\n    }\n  );\n});\nFormLabel.displayName = \"FormLabel\";\nvar RequiredIndicator = forwardRef(\n  function RequiredIndicator2(props, ref) {\n    const field = useFormControlContext();\n    const styles = useFormControlStyles();\n    if (!(field == null ? void 0 : field.isRequired))\n      return null;\n    const className = cx(\"chakra-form__required-indicator\", props.className);\n    return /* @__PURE__ */ jsx(\n      chakra.span,\n      {\n        ...field == null ? void 0 : field.getRequiredIndicatorProps(props, ref),\n        __css: styles.requiredIndicator,\n        className\n      }\n    );\n  }\n);\nRequiredIndicator.displayName = \"RequiredIndicator\";\n\nexport {\n  FormLabel,\n  RequiredIndicator\n};\n//# sourceMappingURL=chunk-7COXQURZ.mjs.map","'use client'\nimport {\n  useFormControlContext\n} from \"./chunk-R42ZB7PB.mjs\";\n\n// src/form-error.tsx\nimport { Icon } from \"@chakra-ui/icon\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar [FormErrorStylesProvider, useFormErrorStyles] = createContext({\n  name: `FormErrorStylesContext`,\n  errorMessage: `useFormErrorStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormError />\" `\n});\nvar FormErrorMessage = forwardRef(\n  (props, ref) => {\n    const styles = useMultiStyleConfig(\"FormError\", props);\n    const ownProps = omitThemingProps(props);\n    const field = useFormControlContext();\n    if (!(field == null ? void 0 : field.isInvalid))\n      return null;\n    return /* @__PURE__ */ jsx(FormErrorStylesProvider, { value: styles, children: /* @__PURE__ */ jsx(\n      chakra.div,\n      {\n        ...field == null ? void 0 : field.getErrorMessageProps(ownProps, ref),\n        className: cx(\"chakra-form__error-message\", props.className),\n        __css: {\n          display: \"flex\",\n          alignItems: \"center\",\n          ...styles.text\n        }\n      }\n    ) });\n  }\n);\nFormErrorMessage.displayName = \"FormErrorMessage\";\nvar FormErrorIcon = forwardRef((props, ref) => {\n  const styles = useFormErrorStyles();\n  const field = useFormControlContext();\n  if (!(field == null ? void 0 : field.isInvalid))\n    return null;\n  const _className = cx(\"chakra-form__error-icon\", props.className);\n  return /* @__PURE__ */ jsx(\n    Icon,\n    {\n      ref,\n      \"aria-hidden\": true,\n      ...props,\n      __css: styles.icon,\n      className: _className,\n      children: /* @__PURE__ */ jsx(\n        \"path\",\n        {\n          fill: \"currentColor\",\n          d: \"M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z\"\n        }\n      )\n    }\n  );\n});\nFormErrorIcon.displayName = \"FormErrorIcon\";\n\nexport {\n  useFormErrorStyles,\n  FormErrorMessage,\n  FormErrorIcon\n};\n//# sourceMappingURL=chunk-WWJYOSXC.mjs.map","'use client'\n\n// src/heading.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Heading = forwardRef(function Heading2(props, ref) {\n  const styles = useStyleConfig(\"Heading\", props);\n  const { className, ...rest } = omitThemingProps(props);\n  return /* @__PURE__ */ jsx(\n    chakra.h2,\n    {\n      ref,\n      className: cx(\"chakra-heading\", props.className),\n      ...rest,\n      __css: styles\n    }\n  );\n});\nHeading.displayName = \"Heading\";\n\nexport {\n  Heading\n};\n//# sourceMappingURL=chunk-7OLJDQMT.mjs.map","import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (data instanceof Set) {\n        copy = new Set(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!isArray && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                if (data.hasOwnProperty(key)) {\n                    copy[key] = cloneObject(data[key]);\n                }\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj, path, defaultValue) => {\n    if (!path || !isObject(obj)) {\n        return defaultValue;\n    }\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n    return isUndefined(result) || result === obj\n        ? isUndefined(obj[path])\n            ? defaultValue\n            : obj[path]\n        : result;\n};\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React.createContext(null);\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useFrom methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => exact && signalName\n    ? name === signalName\n    : !name ||\n        !signalName ||\n        name === signalName ||\n        convertToArrayPayload(name).some((currentName) => currentName &&\n            (currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\n    const _props = React.useRef(props);\n    _props.current = props;\n    React.useEffect(() => {\n        const subscription = !props.disabled &&\n            _props.current.subject &&\n            _props.current.subject.subscribe({\n                next: _props.current.next,\n            });\n        return () => {\n            subscription && subscription.unsubscribe();\n        };\n    }, [props.disabled]);\n}\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React.useState(control._formState);\n    const _mounted = React.useRef(true);\n    const _localProxyFormState = React.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        next: (value) => _mounted.current &&\n            shouldSubscribeByName(_name.current, value.name, exact) &&\n            shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) &&\n            updateFormState({\n                ...control._formState,\n                ...value,\n            }),\n        subject: control._subjects.state,\n    });\n    React.useEffect(() => {\n        _mounted.current = true;\n        _localProxyFormState.current.isValid && control._updateValid(true);\n        return () => {\n            _mounted.current = false;\n        };\n    }, [control]);\n    return getProxyFormState(formState, control, _localProxyFormState.current, false);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { watch } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        subject: control._subjects.values,\n        next: (formState) => {\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\n                updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));\n            }\n        },\n    });\n    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));\n    React.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nfunction set(object, path, value) {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n    return object;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n    });\n    const _registerProps = React.useRef(control.register(name, {\n        ...props.rules,\n        value,\n    }));\n    _registerProps.current = control.register(name, props.rules);\n    React.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    return {\n        field: {\n            name,\n            value,\n            onChange: React.useCallback((event) => _registerProps.current.onChange({\n                target: {\n                    value: getEventValue(event),\n                    name: name,\n                },\n                type: EVENTS.CHANGE,\n            }), [name]),\n            onBlur: React.useCallback(() => _registerProps.current.onBlur({\n                target: {\n                    value: get(control._formValues, name),\n                    name: name,\n                },\n                type: EVENTS.BLUR,\n            }), [name, control]),\n            ref: (elm) => {\n                const field = get(control._fields, name);\n                if (field && elm) {\n                    field._f.ref = {\n                        focus: () => elm.focus(),\n                        select: () => elm.select(),\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\n                        reportValidity: () => elm.reportValidity(),\n                    };\n                }\n            },\n        },\n        formState,\n        fieldState: Object.defineProperties({}, {\n            invalid: {\n                enumerable: true,\n                get: () => !!get(formState.errors, name),\n            },\n            isDirty: {\n                enumerable: true,\n                get: () => !!get(formState.dirtyFields, name),\n            },\n            isTouched: {\n                enumerable: true,\n                get: () => !!get(formState.touchedFields, name),\n            },\n            error: {\n                enumerable: true,\n                get: () => get(formState.errors, name),\n            },\n        }),\n    };\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nconst POST_REQUEST = 'post';\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form(props) {\n    const methods = useFormContext();\n    const [mounted, setMounted] = React.useState(false);\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\n    const submit = async (event) => {\n        let hasError = false;\n        let type = '';\n        await control.handleSubmit(async (data) => {\n            const formData = new FormData();\n            let formDataJson = '';\n            try {\n                formDataJson = JSON.stringify(data);\n            }\n            catch (_a) { }\n            for (const name of control._names.mount) {\n                formData.append(name, get(data, name));\n            }\n            if (onSubmit) {\n                onSubmit({\n                    data,\n                    event,\n                    method,\n                    formData,\n                    formDataJson,\n                });\n            }\n            if (action) {\n                try {\n                    const shouldStringifySubmissionData = [\n                        headers && headers['Content-Type'],\n                        encType,\n                    ].some((value) => value && value.includes('json'));\n                    const response = await fetch(action, {\n                        method,\n                        headers: {\n                            ...headers,\n                            ...(encType ? { 'Content-Type': encType } : {}),\n                        },\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\n                    });\n                    if (response &&\n                        (validateStatus\n                            ? !validateStatus(response.status)\n                            : response.status < 200 || response.status >= 300)) {\n                        hasError = true;\n                        onError && onError({ response });\n                        type = String(response.status);\n                    }\n                    else {\n                        onSuccess && onSuccess({ response });\n                    }\n                }\n                catch (error) {\n                    hasError = true;\n                    onError && onError({ error });\n                }\n            }\n        })(event);\n        if (hasError && props.control) {\n            props.control._subjects.state.next({\n                isSubmitSuccessful: false,\n            });\n            props.control.setError('root.server', {\n                type,\n            });\n        }\n    };\n    React.useEffect(() => {\n        setMounted(true);\n    }, []);\n    return render ? (React.createElement(React.Fragment, null, render({\n        submit,\n    }))) : (React.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nconst focusFieldBy = (fields, callback, fieldsNames) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f && callback(_f.name)) {\n                if (_f.ref.focus) {\n                    _f.ref.focus();\n                    break;\n                }\n                else if (_f.refs && _f.refs[0].focus) {\n                    _f.refs[0].focus();\n                    break;\n                }\n            }\n            else if (isObject(currentField)) {\n                focusFieldBy(currentField, callback);\n            }\n        }\n    }\n};\n\nvar generateId = () => {\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = compact(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMessage = (value) => isString(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabled) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nfunction append(data, value) {\n    return [...data, ...convertToArrayPayload(value)];\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nfunction prepend(data, value) {\n    return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React.useRef(fields);\n    const _name = React.useRef(name);\n    const _actioned = React.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    props.rules &&\n        control.register(name, props.rules);\n    useSubscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n        subject: control._subjects.array,\n    });\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._updateFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append$1 = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = append(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = append(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, append, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend$1 = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prepend(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prepend(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, prepend, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted)) {\n            if (control._options.resolver) {\n                control._executeSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError\n                        ? (!error && existingError.type) ||\n                            (error &&\n                                (existingError.type !== error.type ||\n                                    existingError.message !== error.message))\n                        : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field && field._f) {\n                    validateField(field, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.values.next({\n            name,\n            values: { ...control._formValues },\n        });\n        control._names.focus &&\n            focusFieldBy(control._fields, (key) => !!key && key.startsWith(control._names.focus || ''));\n        control._names.focus = '';\n        control._updateValid();\n    }, [fields, name, control]);\n    React.useEffect(() => {\n        !get(control._formValues, name) && control._updateFieldArray(name);\n        return () => {\n            (control._options.shouldUnregister || shouldUnregister) &&\n                control.unregister(name);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React.useCallback(swap, [updateValues, name, control]),\n        move: React.useCallback(move, [updateValues, name, control]),\n        prepend: React.useCallback(prepend$1, [updateValues, name, control]),\n        append: React.useCallback(append$1, [updateValues, name, control]),\n        remove: React.useCallback(remove, [updateValues, name, control]),\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\n        update: React.useCallback(update, [updateValues, name, control]),\n        replace: React.useCallback(replace, [updateValues, name, control]),\n        fields: React.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\nfunction createSubject() {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n        return;\n    }\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}, flushRootRender) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        errors: {},\n    };\n    let _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.defaultValues || _options.values) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    const _subjects = {\n        values: createSubject(),\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const shouldCaptureDirtyFields = props.resetOptions && props.resetOptions.keepDirtyValues;\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _updateValid = async (shouldUpdateValid) => {\n        if (_proxyFormState.isValid || shouldUpdateValid) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _executeSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (value) => _proxyFormState.isValidating &&\n        _subjects.state.next({\n            isValidating: value,\n        });\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if (_proxyFormState.touchedFields &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _updateValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        if (!isBlurEvent || shouldDirty) {\n            if (_proxyFormState.isDirty) {\n                isPreviousDirty = _formState.isDirty;\n                _formState.isDirty = output.isDirty = _getDirty();\n                shouldUpdateField = isPreviousDirty !== output.isDirty;\n            }\n            const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n            isPreviousDirty = get(_formState.dirtyFields, name);\n            isCurrentFieldPristine\n                ? unset(_formState.dirtyFields, name)\n                : set(_formState.dirtyFields, name, true);\n            output.dirtyFields = _formState.dirtyFields;\n            shouldUpdateField =\n                shouldUpdateField ||\n                    (_proxyFormState.dirtyFields &&\n                        isPreviousDirty !== !isCurrentFieldPristine);\n        }\n        if (isBlurEvent) {\n            const isPreviousFieldTouched = get(_formState.touchedFields, name);\n            if (!isPreviousFieldTouched) {\n                set(_formState.touchedFields, name, isBlurEvent);\n                output.touchedFields = _formState.touchedFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        (_proxyFormState.touchedFields &&\n                            isPreviousFieldTouched !== isBlurEvent);\n            }\n        }\n        shouldUpdateField && shouldRender && _subjects.state.next(output);\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = _proxyFormState.isValid &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (props.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(props.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n        _updateIsValidating(false);\n    };\n    const _executeSchema = async (name) => _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _executeSchema();\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    const fieldError = await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                fieldValue &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\n        !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.length > 1\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                                (checkboxRef.checked = Array.isArray(fieldValue)\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\n                                    : fieldValue === checkboxRef.value))\n                            : fieldReference.refs[0] &&\n                                (fieldReference.refs[0].checked = !!fieldValue);\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.values.next({\n                            name,\n                            values: { ..._formValues },\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            const fieldValue = value[fieldKey];\n            const fieldName = `${name}.${fieldKey}`;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                !isPrimitive(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: { ..._formValues },\n            });\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.values.next({\n            name,\n            values: { ..._formValues },\n        });\n        !_state.mount && flushRootRender();\n    };\n    const onChange = async (event) => {\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = getCurrentFieldValue();\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.values.next({\n                    name,\n                    type: event.type,\n                    values: { ..._formValues },\n                });\n            if (shouldSkipValidation) {\n                _proxyFormState.isValid && _updateValid();\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            _updateIsValidating(true);\n            if (_options.resolver) {\n                const { errors } = await _executeSchema([name]);\n                const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                error = errorLookupResult.error;\n                name = errorLookupResult.name;\n                isValid = isEmptyObject(errors);\n            }\n            else {\n                error = (await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                isFieldValueUpdated =\n                    isNaN(fieldValue) ||\n                        fieldValue === get(_formValues, name, fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        _updateIsValidating(true);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _updateValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n            isValidating: false,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            focusFieldBy(_fields, (key) => key && get(_formState.errors, key), name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ..._defaultValues,\n            ...(_state.mount ? _formValues : {}),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n        error: get((formState || _formState).errors, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        set(_formState.errors, name, {\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.values.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.values.next({\n            values: { ..._formValues },\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _updateValid();\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        if (!isUndefined(options.value)) {\n            set(_formValues, name, options.value);\n        }\n        field\n            ? disabledIsDefined &&\n                set(_formValues, name, options.disabled\n                    ? undefined\n                    : get(_formValues, name, getFieldValue(field._f)))\n            : updateValidAndValue(name, true, options.value);\n        return {\n            ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n            ...(_options.progressive\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        focusFieldBy(_fields, (key) => key && get(_formState.errors, key), _names.mount);\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist && e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _executeSchema();\n            _formState.errors = errors;\n            fieldValues = values;\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            await onValid(fieldValues, e);\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors),\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, get(_defaultValues, name));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, options.defaultValue);\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, get(_defaultValues, name))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _updateValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues || _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const values = formValues && !isEmptyObject(formValues)\n            ? cloneUpdatedValues\n            : _defaultValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues || shouldCaptureDirtyFields) {\n                for (const fieldName of _names.mount) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                _fields = {};\n            }\n            _formValues = props.shouldUnregister\n                ? keepStateOptions.keepDefaultValues\n                    ? cloneObject(_defaultValues)\n                    : {}\n                : cloneObject(values);\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.values.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        !_state.mount && flushRootRender();\n        _state.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n        _state.watch = !!props.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: keepStateOptions.keepDirty\n                ? _formState.isDirty\n                : !!(keepStateOptions.keepDefaultValues &&\n                    !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: keepStateOptions.keepDirtyValues\n                ? _formState.dirtyFields\n                : keepStateOptions.keepDefaultValues && formValues\n                    ? getDirtyFields(_defaultValues, formValues)\n                    : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitting: false,\n            isSubmitSuccessful: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect && fieldRef.select();\n            }\n        }\n    };\n    const _updateFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    return {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            handleSubmit,\n            setError,\n            _executeSchema,\n            _getWatch,\n            _getDirty,\n            _updateValid,\n            _removeUnmounted,\n            _updateFieldArray,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _updateFormState,\n            _subjects,\n            _proxyFormState,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            set _formState(value) {\n                _formState = value;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React.useRef();\n    const _values = React.useRef();\n    const [formState, updateFormState] = React.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        errors: {},\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        _formControl.current = {\n            ...createFormControl(props, () => updateFormState((formState) => ({ ...formState }))),\n            formState,\n        };\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useSubscribe({\n        subject: control._subjects.state,\n        next: (value) => {\n            if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {\n                updateFormState({ ...control._formState });\n            }\n        },\n    });\n    React.useEffect(() => {\n        if (props.values && !deepEqual(props.values, _values.current)) {\n            control._reset(props.values, control._options.resetOptions);\n            _values.current = props.values;\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [props.values, control]);\n    React.useEffect(() => {\n        if (!control._state.mount) {\n            control._updateValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, Form, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n"],"names":["FormLabel","passedProps","ref","_a","styles","props","className","children","requiredIndicator","jsx","RequiredIndicator","optionalIndicator","rest","field","ownProps","getLabelProps","jsxs","label","cx","__css","display","textAlign","isRequired","displayName","span","getRequiredIndicatorProps","FormErrorStylesProvider","useFormErrorStyles","name","errorMessage","FormErrorMessage","isInvalid","value","div","getErrorMessageProps","alignItems","text","_className","icon","fill","d","Heading","h2","isCheckBoxInput","element","type","isDateObject","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","isNameInFieldArray","names","has","substring","search","getNodeParentName","isPlainObject","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isWeb","window","HTMLElement","document","cloneObject","data","copy","Set","Blob","FileList","key","compact","filter","Boolean","isUndefined","val","undefined","get","obj","path","defaultValue","result","split","reduce","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","HookFormContext","useFormContext","getProxyFormState","formState","control","localProxyFormState","isRoot","defaultValues","_defaultValues","Object","defineProperty","_key","_proxyFormState","isEmptyObject","keys","length","shouldRenderFormState","formStateData","updateFormState","find","convertToArrayPayload","shouldSubscribeByName","signalName","exact","some","currentName","startsWith","useSubscribe","_props","current","subscription","disabled","subject","subscribe","next","unsubscribe","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","isKey","test","stringToPath","input","replace","set","object","index","tempPath","lastIndex","newValue","objValue","isNaN","useController","methods","shouldUnregister","isArrayField","array","_name","_subjects","values","updateValue","_formValues","_getWatch","_removeUnmounted","useWatch","_formState","_mounted","_localProxyFormState","isDirty","isLoading","dirtyFields","touchedFields","isValidating","isValid","errors","_updateFormState","state","_updateValid","useFormState","_registerProps","register","rules","_shouldUnregisterField","_options","updateMounted","_fields","_f","mount","_state","action","unregister","elm","focus","select","setCustomValidity","message","reportValidity","fieldState","defineProperties","invalid","enumerable","isTouched","error","Controller","render","appendErrors","validateAllFieldCriteria","types","focusFieldBy","fields","callback","fieldsNames","currentField","refs","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isWatched","isBlurEvent","watchName","slice","updateFieldArrayRootError","fieldArrayErrors","isBoolean","isFileInput","isFunction","isHTMLElement","owner","ownerDocument","defaultView","isMessage","isRadioInput","isRegex","RegExp","defaultResult","validResult","getCheckboxValue","options","option","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","async","shouldUseNativeValidation","isFieldArray","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","inputValue","inputRef","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","unset","paths","childObject","updatePath","baseGet","isEmptyArray","createSubject","_observers","observers","observer","push","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isMultipleSelect","live","isConnected","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","getFieldValueAs","setValueAs","NaN","getFieldValue","files","selectedOptions","getResolverOptions","criteriaMode","getRuleValue","rule","source","hasValidation","schemaErrorLookup","join","foundError","pop","skipValidation","isSubmitted","reValidateMode","unsetEmptyArray","defaultOptions","shouldFocusError","createFormControl","flushRootRender","delayErrorCallback","submitCount","isSubmitting","isSubmitSuccessful","unMount","timer","shouldCaptureDirtyFields","resetOptions","keepDirtyValues","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","shouldUpdateValid","resolver","_executeSchema","executeBuiltInValidation","_updateIsValidating","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","_getDirty","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","previousFieldError","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","context","shouldOnlyCheckValid","valid","isFieldArrayRoot","fieldError","getValues","fieldReference","forEach","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","isFieldValueUpdated","shouldSkipValidation","deps","watched","previousErrorLookupResult","errorLookupResult","fieldNames","executeSchemaAndUpdateState","Promise","shouldFocus","getFieldState","setError","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","disabledIsDefined","progressive","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldValues","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","form","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","argA","argB","_getFieldArray","_resetDefaultValues","then","payload","resetField","clearErrors","inputName","setFocus","shouldSelect","useForm","_formControl","_values"],"sourceRoot":""}