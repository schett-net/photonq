{"version":3,"file":"component---packages-gatsby-plugin-jaen-src-pages-settings-tsx-1c4df8405456d395ba58.js","mappings":"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","sources":["webpack://photonq/../packages/gatsby-plugin-jaen/src/components/shared/FieldGroup/FieldGroup.tsx","webpack://photonq/../packages/gatsby-plugin-jaen/src/components/shared/FormImageChooser/FormImageChooser.tsx","webpack://photonq/../packages/gatsby-plugin-jaen/src/components/Settings/components/AccountForm/AccountForm.tsx","webpack://photonq/../packages/gatsby-plugin-jaen/src/components/Settings/components/EmailForm/EmailForm.tsx","webpack://photonq/../packages/gatsby-plugin-jaen/src/components/Settings/components/PasswordForm/PasswordForm.tsx","webpack://photonq/../packages/gatsby-plugin-jaen/src/components/Settings/Settings.tsx","webpack://photonq/../packages/gatsby-plugin-jaen/src/pages/settings.tsx","webpack://photonq/../node_modules/@chakra-ui/card/dist/chunk-FHHZMTWR.mjs","webpack://photonq/../node_modules/@chakra-ui/card/dist/chunk-HAZMUPV3.mjs","webpack://photonq/../node_modules/@chakra-ui/card/dist/chunk-YQO7BFFX.mjs","webpack://photonq/../node_modules/@chakra-ui/layout/dist/chunk-46CXQZ4E.mjs","webpack://photonq/../node_modules/@chakra-ui/layout/dist/chunk-KTD65HY5.mjs"],"sourcesContent":["import {Box, Heading, Stack, StackProps} from '@chakra-ui/react'\n\nexport interface FieldGroupProps extends StackProps {\n  title?: string\n}\n\nexport const FieldGroup = (props: FieldGroupProps) => {\n  const {title, children, ...flexProps} = props\n  return (\n    <Stack\n      direction={{base: 'column', md: 'row'}}\n      spacing=\"6\"\n      py=\"4\"\n      {...flexProps}>\n      <Box minW=\"3xs\">\n        {title && (\n          <Heading as=\"h2\" fontWeight=\"semibold\" fontSize=\"lg\" flexShrink={0}>\n            {title}\n          </Heading>\n        )}\n      </Box>\n      {children}\n    </Stack>\n  )\n}\n","import React, {useState, useCallback} from 'react'\nimport {\n  HStack,\n  Button,\n  Box,\n  Text,\n  Image,\n  Stack,\n  Center,\n  Skeleton\n} from '@chakra-ui/react'\nimport {FaCloudUploadAlt} from 'react-icons/fa'\nimport {useDropzone} from 'react-dropzone'\n\nexport interface FormImageChooserProps {\n  onChoose: (file: File) => void\n  value?: string\n  onRemove: () => void\n  description?: string\n}\n\nexport const FormImageChooser: React.FC<FormImageChooserProps> = props => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [selectedImage, setSelectedImage] = useState<File | null>(null)\n\n  const onChoose = useCallback(\n    (acceptedFiles: File[]) => {\n      if (acceptedFiles.length > 0) {\n        setIsLoading(true)\n\n        // Simulate a delay for demonstration purposes\n        setTimeout(() => {\n          setIsLoading(false)\n          setSelectedImage(acceptedFiles[0]!)\n          props.onChoose(acceptedFiles[0]!)\n        }, 1000)\n      }\n    },\n    [props]\n  )\n\n  const onRemoveImage = () => {\n    setSelectedImage(null)\n    props.onRemove()\n  }\n\n  const {getRootProps, getInputProps, open} = useDropzone({\n    accept: {\n      'image/*': ['.jpg', '.jpeg', '.png', '.gif']\n    },\n    onDrop: onChoose,\n    multiple: false\n  })\n\n  return (\n    <Stack direction=\"row\" spacing=\"6\" align=\"center\" width=\"full\">\n      <Box\n        boxSize={36}\n        minW=\"36\"\n        borderRadius=\"lg\"\n        bg=\"bg.subtle\"\n        {...getRootProps()}>\n        {selectedImage || props.value ? (\n          <Image\n            borderRadius=\"lg\"\n            boxSize=\"100%\"\n            src={\n              selectedImage ? URL.createObjectURL(selectedImage) : props.value\n            }\n            fallback={<Skeleton borderRadius=\"lg\" boxSize=\"100%\" />}\n          />\n        ) : (\n          <Center boxSize=\"100%\" borderRadius=\"lg\">\n            <Text color=\"muted\" fontSize=\"sm\">\n              No image\n            </Text>\n          </Center>\n        )}\n        <input {...getInputProps()} />\n      </Box>\n      <Stack>\n        <HStack spacing=\"5\">\n          <Button\n            isLoading={isLoading}\n            variant=\"outline\"\n            leftIcon={<FaCloudUploadAlt />}\n            onClick={open}>\n            Choose media\n          </Button>\n          {selectedImage && (\n            <Button variant=\"ghost\" onClick={onRemoveImage}>\n              Remove\n            </Button>\n          )}\n        </HStack>\n        <Text fontSize=\"sm\" mt=\"3\" color=\"muted\">\n          {props.description}\n        </Text>\n      </Stack>\n    </Stack>\n  )\n}\n","import {\n  Button,\n  ButtonGroup,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  Stack\n} from '@chakra-ui/react'\nimport React from 'react'\nimport {Controller, useForm} from 'react-hook-form'\n\nimport {FieldGroup} from '../../../../components/shared/FieldGroup'\nimport {FormImageChooser} from '../../../../components/shared/FormImageChooser'\n\nexport interface AccountFormData {\n  firstName: string\n  lastName: string\n  username: string\n  avatarURL: string\n}\n\nexport interface AccountFormProps {\n  onSubmit: (\n    data: AccountFormData & {\n      avatarFile: File | null\n    }\n  ) => Promise<void>\n  defaultValues?: Partial<AccountFormData>\n}\n\nexport const AccountForm: React.FC<AccountFormProps> = ({\n  onSubmit,\n  defaultValues\n}) => {\n  const {\n    handleSubmit,\n    register,\n    control,\n    formState: {errors, isSubmitting},\n    setValue,\n    reset\n  } = useForm<AccountFormData>({\n    defaultValues\n  })\n\n  const [avatarFile, setAvatarFile] = React.useState<File | null>(null)\n\n  const onFormSubmit = handleSubmit(async data => {\n    // promise to wait for image upload\n\n    await onSubmit({\n      ...data,\n      avatarFile\n    })\n\n    reset(data)\n  })\n\n  return (\n    <form onSubmit={onFormSubmit}>\n      <FieldGroup title=\"Account\">\n        <Stack width=\"full\" spacing=\"8\" maxW=\"2xl\">\n          <Stack>\n            <FormControl id=\"firstName\" isInvalid={!!errors.firstName}>\n              <FormLabel>First Name</FormLabel>\n              <Input placeholder=\"\" {...register('firstName', {})} />\n              <FormErrorMessage>\n                {errors.firstName && errors.firstName.message}\n              </FormErrorMessage>\n            </FormControl>\n\n            <FormControl id=\"lastName\" isInvalid={!!errors?.lastName}>\n              <FormLabel>Last Name</FormLabel>\n              <Input placeholder=\"\" {...register('lastName', {})} />\n              <FormErrorMessage>\n                {errors.lastName && errors.lastName.message}\n              </FormErrorMessage>\n            </FormControl>\n          </Stack>\n\n          <FormControl id=\"username\" isInvalid={!!errors.username} isDisabled>\n            <FormLabel>Username</FormLabel>\n            <Input\n              isDisabled\n              maxW=\"xs\"\n              {...register('username', {\n                required: 'This field is required'\n              })}\n              autoComplete=\"false\"\n              color=\"fg.muted\"\n            />\n            <FormErrorMessage>\n              {errors.username && errors.username.message}\n            </FormErrorMessage>\n          </FormControl>\n\n          <FormControl id=\"image\">\n            <FormLabel>Image</FormLabel>\n\n            <Controller\n              control={control}\n              name=\"avatarURL\"\n              render={({field: {value}}) => {\n                return (\n                  <FormImageChooser\n                    value={value}\n                    onChoose={file => {\n                      setAvatarFile(file)\n                      setValue('avatarURL', URL.createObjectURL(file), {\n                        shouldDirty: true\n                      })\n                    }}\n                    onRemove={() => {\n                      setAvatarFile(null)\n                      setValue('avatarURL', defaultValues?.avatarURL || '')\n                    }}\n                    description=\"Upload a profile picture to make your account easier to recognize.\"\n                  />\n                )\n              }}\n            />\n          </FormControl>\n\n          <ButtonGroup>\n            <Button isLoading={isSubmitting} type=\"submit\" variant=\"outline\">\n              Update account\n            </Button>\n          </ButtonGroup>\n        </Stack>\n      </FieldGroup>\n    </form>\n  )\n}\n\nexport default AccountForm\n","import {\n  Button,\n  ButtonGroup,\n  Card,\n  CardBody,\n  HStack,\n  IconButton,\n  Input,\n  ListItem,\n  Stack,\n  StackDivider,\n  Text,\n  UnorderedList\n} from '@chakra-ui/react'\nimport React from 'react'\nimport {useForm} from 'react-hook-form'\nimport {FaTrash} from 'react-icons/fa'\n\nimport {Link} from '../../../../components/shared/Link'\nimport {FieldGroup} from '../../../../components/shared/FieldGroup'\n\ninterface EmailData {\n  id: string\n  emailAddress: string\n  isVerified?: boolean\n  isPrimary?: boolean\n}\n\nexport interface EmailFormData {\n  emailAddress: string\n}\n\nexport interface EmailFormProps {\n  onSubmit: (email: EmailFormData) => Promise<void>\n  onRemove: (emailId: string) => Promise<void>\n  onResendVerification: (emailId: string) => Promise<void>\n  defaultValues?: {\n    emails: EmailData[]\n  }\n}\n\nexport const EmailForm: React.FC<EmailFormProps> = ({\n  onSubmit,\n  onRemove,\n  onResendVerification,\n  defaultValues\n}) => {\n  const {\n    handleSubmit,\n    register,\n    control,\n    formState: {errors, isSubmitting},\n    setValue,\n    reset\n  } = useForm<EmailFormData>()\n\n  const onFormSubmit = handleSubmit(async data => {\n    await onSubmit(data)\n\n    reset()\n  })\n\n  return (\n    <FieldGroup title=\"Emails\">\n      <Stack spacing=\"6\">\n        <Card maxW=\"full\">\n          <CardBody>\n            <Stack divider={<StackDivider />} spacing=\"4\">\n              {defaultValues?.emails\n                .sort((a, b) => Number(b.isPrimary) - Number(a.isPrimary))\n                .map(email => {\n                  return (\n                    <Stack key={email.id}>\n                      <HStack justify=\"space-between\">\n                        <HStack>\n                          <Text fontSize=\"sm\" fontWeight=\"bold\">\n                            {email.emailAddress}\n                          </Text>\n                          -{' '}\n                          <Text>\n                            {email.isPrimary && (\n                              <>\n                                -{'  '}\n                                <Text fontSize=\"sm\" as=\"span\" color=\"green.500\">\n                                  Primary\n                                </Text>\n                              </>\n                            )}\n                          </Text>\n                        </HStack>\n                        <IconButton\n                          size=\"xs\"\n                          aria-label=\"Delete email address\"\n                          variant=\"ghost\"\n                          color=\"red.500\"\n                          visibility={email.isPrimary ? 'hidden' : 'visible'}\n                          icon={<FaTrash />}\n                          onClick={() => onRemove(email.id)}\n                        />\n                      </HStack>\n\n                      <UnorderedList>\n                        {email.isPrimary && (\n                          <ListItem fontSize=\"sm\" color=\"muted\">\n                            Primary email addresses are used for account-related\n                            communications (e.g. password resets).\n                          </ListItem>\n                        )}\n\n                        {!email.isVerified && (\n                          <ListItem fontSize=\"sm\" color=\"muted\">\n                            <HStack>\n                              <Text>Unverified</Text>\n                              <Link\n                                onClick={() => {\n                                  onResendVerification(email.id)\n                                }}>\n                                Resend verification email\n                              </Link>\n                            </HStack>\n                          </ListItem>\n                        )}\n                      </UnorderedList>\n                    </Stack>\n                  )\n                })}\n            </Stack>\n          </CardBody>\n        </Card>\n\n        <Stack spacing=\"4\">\n          <Text fontSize=\"sm\" color=\"muted\">\n            Add an email address to your account.\n          </Text>\n          <form onSubmit={onFormSubmit}>\n            <Stack direction=\"row\" spacing=\"4\">\n              <Input\n                maxW=\"xs\"\n                {...register('emailAddress', {\n                  required: 'This field is required',\n                  pattern: {\n                    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                    message: 'Invalid email address'\n                  }\n                })}\n                type=\"email\"\n                placeholder=\"Email\"\n              />\n              <ButtonGroup>\n                <Button\n                  type=\"submit\"\n                  isLoading={isSubmitting}\n                  loadingText=\"Adding...\"\n                  variant=\"outline\">\n                  Add\n                </Button>\n              </ButtonGroup>\n            </Stack>\n          </form>\n        </Stack>\n      </Stack>\n    </FieldGroup>\n  )\n}\n","import React from 'react'\nimport {\n  FormControl,\n  FormLabel,\n  Input,\n  Stack,\n  Text,\n  Button,\n  ButtonGroup,\n  HStack,\n  FormErrorMessage\n} from '@chakra-ui/react'\nimport {useForm, Controller} from 'react-hook-form'\n\nimport {FieldGroup} from '../../../../components/shared/FieldGroup'\nimport {Link} from '../../../../components/shared/Link'\n\nexport interface PasswordFormData {\n  password: string\n  confirmPassword: string\n}\n\nexport interface PasswordFormProps {\n  onSubmit: (data: PasswordFormData) => Promise<void>\n  passwordResetPath: string\n}\n\nexport const PasswordForm: React.FC<PasswordFormProps> = ({\n  onSubmit,\n  passwordResetPath\n}) => {\n  const {\n    handleSubmit,\n    control,\n    formState: {isSubmitting, errors},\n    watch\n  } = useForm<PasswordFormData>()\n\n  const onFormSubmit = handleSubmit(async data => {\n    await onSubmit(data)\n  })\n\n  const password = watch('password', '')\n\n  return (\n    <form onSubmit={onFormSubmit}>\n      <FieldGroup title=\"Password\">\n        <Stack width=\"full\" spacing=\"6\" maxW=\"2xl\">\n          <Input\n            type=\"email\"\n            name=\"email\"\n            autoComplete=\"email\"\n            display=\"none\"\n          />\n\n          <FormControl id=\"password\">\n            <FormLabel>Password</FormLabel>\n            <Controller\n              control={control}\n              name=\"password\"\n              rules={{required: 'This field is required'}}\n              render={({field}) => (\n                <Input\n                  maxW=\"xs\"\n                  {...field}\n                  type=\"password\"\n                  autoComplete=\"new-password\"\n                />\n              )}\n            />\n          </FormControl>\n\n          <FormControl\n            id=\"confirmPassword\"\n            isInvalid={!!errors.confirmPassword}>\n            <FormLabel>Confirm Password</FormLabel>\n            <Controller\n              control={control}\n              name=\"confirmPassword\"\n              rules={{\n                required: 'This field is required',\n                validate: value =>\n                  value === password || 'Passwords do not match'\n              }}\n              render={({field}) => (\n                <Input\n                  maxW=\"xs\"\n                  {...field}\n                  type=\"password\"\n                  autoComplete=\"new-password\"\n                />\n              )}\n            />\n\n            <FormErrorMessage>\n              {errors.confirmPassword && errors.confirmPassword.message}\n            </FormErrorMessage>\n          </FormControl>\n\n          {\n            // update password or forgot password link\n          }\n          <Stack>\n            <Text fontSize=\"sm\" color=\"muted\">\n              Make sure your password is at least 15 characters OR at least 8\n              characters including a number and a lowercase letter.\n            </Text>\n\n            <HStack spacing=\"4\">\n              <Button isLoading={isSubmitting} type=\"submit\" variant=\"outline\">\n                Update password\n              </Button>\n              <Link fontSize=\"sm\" to={passwordResetPath}>\n                I forgot my password\n              </Link>\n            </HStack>\n          </Stack>\n        </Stack>\n      </FieldGroup>\n    </form>\n  )\n}\n","import {\n  Button,\n  ButtonGroup,\n  Card,\n  CardBody,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Heading,\n  HStack,\n  IconButton,\n  Input,\n  ListItem,\n  Stack,\n  StackDivider,\n  Text,\n  UnorderedList\n} from '@chakra-ui/react'\n\nimport {Controller, useForm} from 'react-hook-form'\nimport {FaTrash} from 'react-icons/fa'\nimport {FieldGroup} from '../../components/shared/FieldGroup'\nimport FormMediaChooser from '../../containers/form-media-chooser'\nimport {AccountForm} from './components/AccountForm'\nimport {AccountFormData} from './components/AccountForm/AccountForm'\nimport {EmailForm} from './components/EmailForm'\nimport {EmailFormData} from './components/EmailForm/EmailForm'\nimport {PasswordForm} from './components/PasswordForm'\nimport {PasswordFormData} from './components/PasswordForm/PasswordForm'\n\ninterface FormDataType {\n  username?: string\n  details?: {\n    firstName?: string\n    lastName?: string\n    avatarURL?: string\n  }\n  emails?: Array<{\n    id: string\n    emailAddress: string\n    isVerified?: boolean\n    isPrimary?: boolean\n  }>\n  image?: string\n}\n\nexport interface SettingsProps {\n  data: FormDataType\n\n  onAccountFormSubmit: (data: AccountFormData) => Promise<void>\n  onEmailFormSubmit: (data: EmailFormData) => Promise<void>\n  onEmailRemove: (emailId: string) => Promise<void>\n  onEmailConfirmationResend: (emailId: string) => Promise<void>\n  onPasswordFormSubmit: (data: PasswordFormData) => Promise<void>\n}\n\nexport const Settings: React.FC<SettingsProps> = props => {\n  const handleAccountFormSubmit = async (data: AccountFormData) => {\n    console.log('Account form data:', data)\n    // Add logic to handle account form submission\n\n    await props.onAccountFormSubmit(data)\n  }\n\n  const handleEmailFormSubmit = async (data: EmailFormData) => {\n    console.log('Email form data:', data)\n    // Add logic to handle email form submission\n\n    await props.onEmailFormSubmit(data)\n  }\n\n  const handleEmailRemove = async (emailId: string) => {\n    console.log('Remove email:', emailId)\n    // Add logic to handle email removal\n\n    await props.onEmailRemove(emailId)\n  }\n\n  const handleEmailConfirmationResend = async (emailId: string) => {\n    console.log('Resend email confirmation:', emailId)\n    // Add logic to handle email confirmation resend\n\n    await props.onEmailConfirmationResend(emailId)\n  }\n\n  const handlePasswordFormSubmit = async (data: PasswordFormData) => {\n    console.log('Password form data:', data)\n    // Add logic to handle password form submission\n\n    await props.onPasswordFormSubmit(data)\n  }\n\n  return (\n    <Stack spacing=\"4\" divider={<StackDivider />} px={{base: '4', md: '10'}}>\n      <Heading size=\"sm\">Settings</Heading>\n\n      <AccountForm\n        onSubmit={handleAccountFormSubmit}\n        defaultValues={{\n          firstName: props.data.details?.firstName,\n          lastName: props.data.details?.lastName,\n          avatarURL: props.data.details?.avatarURL,\n          username: props.data.username\n        }}\n      />\n      <EmailForm\n        onSubmit={handleEmailFormSubmit}\n        onRemove={handleEmailRemove}\n        onResendVerification={handleEmailConfirmationResend}\n        defaultValues={{emails: props.data.emails || []}}\n      />\n      <PasswordForm\n        onSubmit={handlePasswordFormSubmit}\n        passwordResetPath=\"/password_reset\"\n      />\n    </Stack>\n  )\n\n  // return (\n  //   <>\n  //     <Stack spacing=\"4\" divider={<StackDivider />} px={{base: '4', md: '10'}}>\n  //       <Heading size=\"sm\">Settings</Heading>\n\n  //       <FieldGroup title=\"Account\">\n  //         <Stack width=\"full\" spacing=\"6\">\n  //           <HStack>\n  //             <FormControl\n  //               id=\"firstName\"\n  //               isInvalid={!!errors.details?.firstName}>\n  //               <FormLabel>First Name</FormLabel>\n  //               <Input\n  //                 placeholder=\"\"\n  //                 {...register('details.firstName', {\n  //                   required: 'This field is required'\n  //                 })}\n  //               />\n  //               <FormErrorMessage>\n  //                 {errors.details?.firstName &&\n  //                   errors.details.firstName.message}\n  //               </FormErrorMessage>\n  //             </FormControl>\n\n  //             <FormControl id=\"lastName\" isInvalid={!!errors.details?.lastName}>\n  //               <FormLabel>Last Name</FormLabel>\n  //               <Input\n  //                 placeholder=\"\"\n  //                 {...register('details.lastName', {\n  //                   required: 'This field is required'\n  //                 })}\n  //               />\n  //               <FormErrorMessage>\n  //                 {errors.details?.lastName && errors.details.lastName.message}\n  //               </FormErrorMessage>\n  //             </FormControl>\n  //           </HStack>\n\n  //           <FormControl id=\"username\" isInvalid={!!errors.username}>\n  //             <FormLabel>Username</FormLabel>\n  //             <Input\n  //               placeholder=\"\"\n  //               {...register('username', {\n  //                 required: 'This field is required'\n  //               })}\n  //               autoComplete=\"false\"\n  //             />\n  //             <FormErrorMessage>\n  //               {errors.username && errors.username.message}\n  //             </FormErrorMessage>\n  //           </FormControl>\n\n  //           <FormControl id=\"image\">\n  //             <FormLabel>Image</FormLabel>\n\n  //             <Controller\n  //               control={control}\n  //               name=\"image\"\n  //               render={({field: {value}}) => {\n  //                 return (\n  //                   <FormMediaChooser\n  //                     value={value}\n  //                     onChoose={media => {\n  //                       setValue('image', media.url, {\n  //                         shouldDirty: true\n  //                       })\n  //                     }}\n  //                     onRemove={() => {\n  //                       setValue('image', '', {\n  //                         shouldDirty: true\n  //                       })\n  //                     }}\n  //                     description=\"Upload a profile picture to make your account easier to recognize.\"\n  //                     isDirect\n  //                   />\n  //                 )\n  //               }}\n  //             />\n  //           </FormControl>\n  //         </Stack>\n  //       </FieldGroup>\n\n  //       <FieldGroup title=\"Emails\">\n  //         <Card>\n  //           <CardBody>\n  //             <Stack divider={<StackDivider />} spacing=\"4\">\n  //               {[\n  //                 {\n  //                   id: 'email-1',\n  //                   emailAddress: 'schett@snek.at',\n  //                   isVerified: true,\n  //                   isPrimary: true\n  //                 },\n  //                 {\n  //                   id: 'email-2',\n  //                   emailAddress: 'nicoschett@icloud.com'\n  //                 }\n  //               ].map(email => {\n  //                 return (\n  //                   <Stack key={email.id}>\n  //                     <HStack justify=\"space-between\">\n  //                       <HStack>\n  //                         <Text fontSize=\"sm\" fontWeight=\"bold\">\n  //                           {email.emailAddress}\n  //                         </Text>\n  //                         -{' '}\n  //                         <Text>\n  //                           {email.isPrimary && (\n  //                             <>\n  //                               -{'  '}\n  //                               <Text fontSize=\"sm\" as=\"span\" color=\"green.500\">\n  //                                 Primary\n  //                               </Text>\n  //                             </>\n  //                           )}\n  //                         </Text>\n  //                       </HStack>\n  //                       <IconButton\n  //                         size=\"xs\"\n  //                         aria-label=\"Delete email address\"\n  //                         variant=\"ghost\"\n  //                         color=\"red.500\"\n  //                         icon={<FaTrash />}\n  //                       />\n  //                     </HStack>\n\n  //                     <UnorderedList>\n  //                       {email.isPrimary && (\n  //                         <ListItem fontSize=\"sm\" color=\"muted\">\n  //                           Primary email addresses are used for account-related\n  //                           communications (e.g. password resets).\n  //                         </ListItem>\n  //                       )}\n\n  //                       {!email.isVerified && (\n  //                         <ListItem fontSize=\"sm\" color=\"muted\">\n  //                           <HStack>\n  //                             <Text>Unverified</Text>\n  //                             <Button variant=\"link\">\n  //                               Resend verification email\n  //                             </Button>\n  //                           </HStack>\n  //                         </ListItem>\n  //                       )}\n  //                     </UnorderedList>\n  //                   </Stack>\n  //                 )\n  //               })}\n  //             </Stack>\n  //           </CardBody>\n  //         </Card>\n  //       </FieldGroup>\n\n  //       <FieldGroup title=\"Password\">\n  //         <Stack width=\"full\" spacing=\"6\">\n  //           <FormControl id=\"password\">\n  //             <FormLabel>Password</FormLabel>\n  //             <Input\n  //               placeholder=\"\"\n  //               type=\"password\"\n  //               autoComplete=\"new-password\"\n  //             />\n  //           </FormControl>\n\n  //           <FormControl id=\"confirmPassword\">\n  //             <FormLabel>Confirm Password</FormLabel>\n  //             <Input\n  //               placeholder=\"\"\n  //               type=\"password\"\n  //               autoComplete=\"new-password\"\n  //             />\n  //           </FormControl>\n\n  //           {\n  //             // update password or forgot password link\n  //           }\n  //           <Stack>\n  //             <Text fontSize=\"sm\" color=\"muted\">\n  //               Make sure your password is at least 15 characters OR at least 8\n  //               characters including a number and a lowercase letter.\n  //             </Text>\n\n  //             <ButtonGroup>\n  //               <Button\n  //                 isLoading={isSubmitting}\n  //                 type=\"submit\"\n  //                 variant=\"outline\">\n  //                 Update password\n  //               </Button>\n  //               <Button isLoading={isSubmitting} type=\"submit\" variant=\"link\">\n  //                 I forgot my password\n  //               </Button>\n  //             </ButtonGroup>\n  //           </Stack>\n  //         </Stack>\n  //       </FieldGroup>\n  //     </Stack>\n  //   </>\n  // )\n}\n","import {\n  PageConfig,\n  useAuthenticationContext,\n  useNotificationsContext\n} from 'jaen'\nimport {PageProps} from 'gatsby'\nimport React from 'react'\n\nimport {Settings} from '../components/Settings'\n\nconst SettingsPage: React.FC<PageProps> = () => {\n  const authentication = useAuthenticationContext()\n\n  const {toast} = useNotificationsContext()\n\n  return (\n    <Settings\n      data={{\n        username: authentication.user?.username,\n        details: authentication.user?.details,\n        emails: authentication.user?.emails\n      }}\n      onAccountFormSubmit={async data => {\n        try {\n          await authentication.updateDetails(data)\n\n          toast({\n            title: 'Account updated',\n            status: 'success'\n          })\n        } catch (e) {\n          toast({\n            title: 'Error',\n            description: e.message,\n            status: 'error'\n          })\n        }\n      }}\n      onEmailFormSubmit={async data => {\n        try {\n          await authentication.addEmail(data.emailAddress)\n\n          toast({\n            title: 'Email added',\n            status: 'success'\n          })\n        } catch (e) {\n          toast({\n            title: 'Error',\n            description: e.message,\n            status: 'error'\n          })\n        }\n      }}\n      onEmailRemove={async emailId => {\n        try {\n          await authentication.removeEmail(emailId)\n\n          toast({\n            title: 'Email removed',\n            status: 'success'\n          })\n        } catch (e) {\n          toast({\n            title: 'Error',\n            description: e.message,\n            status: 'error'\n          })\n        }\n      }}\n      onPasswordFormSubmit={async data => {\n        try {\n          await authentication.updatePassword(data.password)\n\n          toast({\n            title: 'Password updated',\n            status: 'success'\n          })\n        } catch (e) {\n          toast({\n            title: 'Error',\n            description: e.message,\n            status: 'error'\n          })\n        }\n      }}\n      onEmailConfirmationResend={async emailId => {\n        try {\n          await authentication.emailConfirmationResend(emailId)\n\n          toast({\n            title: 'Verification email sent',\n            status: 'success'\n          })\n        } catch (e) {\n          toast({\n            title: 'Error',\n            description: e.message,\n            status: 'error'\n          })\n        }\n      }}\n    />\n  )\n}\n\nexport default SettingsPage\n\nexport const pageConfig: PageConfig = {\n  label: 'Settings',\n  icon: 'FaUserCog',\n  menu: {\n    order: 100,\n    type: 'user'\n  },\n  auth: {\n    isRequired: true\n  },\n  layout: {\n    name: 'jaen'\n  }\n}\n\nexport {Head} from 'jaen'\n","'use client'\nimport {\n  useCardStyles\n} from \"./chunk-HAZMUPV3.mjs\";\n\n// src/card-body.tsx\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { forwardRef, chakra } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar CardBody = forwardRef(function CardBody2(props, ref) {\n  const { className, ...rest } = props;\n  const styles = useCardStyles();\n  return /* @__PURE__ */ jsx(\n    chakra.div,\n    {\n      ref,\n      className: cx(\"chakra-card__body\", className),\n      __css: styles.body,\n      ...rest\n    }\n  );\n});\n\nexport {\n  CardBody\n};\n//# sourceMappingURL=chunk-FHHZMTWR.mjs.map","'use client'\n\n// src/card-context.tsx\nimport { createStylesContext } from \"@chakra-ui/system\";\nvar [CardStylesProvider, useCardStyles] = createStylesContext(\"Card\");\n\nexport {\n  CardStylesProvider,\n  useCardStyles\n};\n//# sourceMappingURL=chunk-HAZMUPV3.mjs.map","'use client'\nimport {\n  CardStylesProvider\n} from \"./chunk-HAZMUPV3.mjs\";\n\n// src/card.tsx\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport {\n  forwardRef,\n  chakra,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Card = forwardRef(function Card2(props, ref) {\n  const {\n    className,\n    children,\n    direction = \"column\",\n    justify,\n    align,\n    ...rest\n  } = omitThemingProps(props);\n  const styles = useMultiStyleConfig(\"Card\", props);\n  return /* @__PURE__ */ jsx(\n    chakra.div,\n    {\n      ref,\n      className: cx(\"chakra-card\", className),\n      __css: {\n        display: \"flex\",\n        flexDirection: direction,\n        justifyContent: justify,\n        alignItems: align,\n        position: \"relative\",\n        minWidth: 0,\n        wordWrap: \"break-word\",\n        ...styles.container\n      },\n      ...rest,\n      children: /* @__PURE__ */ jsx(CardStylesProvider, { value: styles, children })\n    }\n  );\n});\n\nexport {\n  Card\n};\n//# sourceMappingURL=chunk-YQO7BFFX.mjs.map","'use client'\n\n// src/list.tsx\nimport { Icon } from \"@chakra-ui/icon\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\";\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useMultiStyleConfig\n} from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar [ListStylesProvider, useListStyles] = createContext({\n  name: `ListStylesContext`,\n  errorMessage: `useListStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<List />\" `\n});\nvar List = forwardRef(function List2(props, ref) {\n  const styles = useMultiStyleConfig(\"List\", props);\n  const {\n    children,\n    styleType = \"none\",\n    stylePosition,\n    spacing,\n    ...rest\n  } = omitThemingProps(props);\n  const validChildren = getValidChildren(children);\n  const selector = \"& > *:not(style) ~ *:not(style)\";\n  const spacingStyle = spacing ? { [selector]: { mt: spacing } } : {};\n  return /* @__PURE__ */ jsx(ListStylesProvider, { value: styles, children: /* @__PURE__ */ jsx(\n    chakra.ul,\n    {\n      ref,\n      listStyleType: styleType,\n      listStylePosition: stylePosition,\n      role: \"list\",\n      __css: { ...styles.container, ...spacingStyle },\n      ...rest,\n      children: validChildren\n    }\n  ) });\n});\nList.displayName = \"List\";\nvar OrderedList = forwardRef((props, ref) => {\n  const { as, ...rest } = props;\n  return /* @__PURE__ */ jsx(List, { ref, as: \"ol\", styleType: \"decimal\", marginStart: \"1em\", ...rest });\n});\nOrderedList.displayName = \"OrderedList\";\nvar UnorderedList = forwardRef(function UnorderedList2(props, ref) {\n  const { as, ...rest } = props;\n  return /* @__PURE__ */ jsx(List, { ref, as: \"ul\", styleType: \"initial\", marginStart: \"1em\", ...rest });\n});\nUnorderedList.displayName = \"UnorderedList\";\nvar ListItem = forwardRef(function ListItem2(props, ref) {\n  const styles = useListStyles();\n  return /* @__PURE__ */ jsx(chakra.li, { ref, ...props, __css: styles.item });\n});\nListItem.displayName = \"ListItem\";\nvar ListIcon = forwardRef(function ListIcon2(props, ref) {\n  const styles = useListStyles();\n  return /* @__PURE__ */ jsx(Icon, { ref, role: \"presentation\", ...props, __css: styles.icon });\n});\nListIcon.displayName = \"ListIcon\";\n\nexport {\n  useListStyles,\n  List,\n  OrderedList,\n  UnorderedList,\n  ListItem,\n  ListIcon\n};\n//# sourceMappingURL=chunk-46CXQZ4E.mjs.map","'use client'\n\n// src/stack/stack-divider.tsx\nimport { chakra } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar StackDivider = (props) => /* @__PURE__ */ jsx(\n  chakra.div,\n  {\n    className: \"chakra-stack__divider\",\n    ...props,\n    __css: {\n      ...props[\"__css\"],\n      borderWidth: 0,\n      alignSelf: \"stretch\",\n      borderColor: \"inherit\",\n      width: \"auto\",\n      height: \"auto\"\n    }\n  }\n);\nStackDivider.displayName = \"StackDivider\";\n\nexport {\n  StackDivider\n};\n//# sourceMappingURL=chunk-KTD65HY5.mjs.map"],"names":["FieldGroup","props","title","children","flexProps","_jsxs","Stack","direction","base","md","spacing","py","_jsx","Box","minW","Heading","as","fontWeight","fontSize","flexShrink","FormImageChooser","isLoading","setIsLoading","useState","selectedImage","setSelectedImage","onChoose","useCallback","acceptedFiles","length","setTimeout","getRootProps","getInputProps","open","useDropzone","accept","onDrop","multiple","align","width","boxSize","borderRadius","bg","value","Image","src","URL","createObjectURL","fallback","Skeleton","Center","Text","color","HStack","Button","variant","leftIcon","FaCloudUploadAlt","onClick","onRemoveImage","onRemove","mt","description","AccountForm","_ref","onSubmit","defaultValues","handleSubmit","register","control","formState","errors","isSubmitting","setValue","reset","useForm","avatarFile","setAvatarFile","React","onFormSubmit","async","data","maxW","FormControl","id","isInvalid","firstName","FormLabel","Input","placeholder","FormErrorMessage","message","lastName","username","isDisabled","required","autoComplete","Controller","name","render","_ref2","field","file","shouldDirty","avatarURL","ButtonGroup","type","EmailForm","onResendVerification","Card","CardBody","divider","StackDivider","emails","sort","a","b","Number","isPrimary","map","email","justify","emailAddress","_Fragment","IconButton","size","visibility","icon","FaTrash","UnorderedList","ListItem","isVerified","Link","pattern","loadingText","PasswordForm","passwordResetPath","watch","password","display","rules","confirmPassword","validate","_ref3","to","Settings","_props$data$details","_props$data$details2","_props$data$details3","px","console","log","onAccountFormSubmit","details","onEmailFormSubmit","emailId","onEmailRemove","onEmailConfirmationResend","onPasswordFormSubmit","SettingsPage","_authentication$user","_authentication$user2","_authentication$user3","authentication","useAuthenticationContext","toast","useNotificationsContext","user","updateDetails","status","e","addEmail","removeEmail","updatePassword","emailConfirmationResend","pageConfig","label","menu","order","auth","isRequired","layout","ref","className","rest","styles","jsx","div","cx","__css","body","CardStylesProvider","useCardStyles","flexDirection","justifyContent","alignItems","position","minWidth","wordWrap","container","ListStylesProvider","useListStyles","errorMessage","List","styleType","stylePosition","validChildren","spacingStyle","ul","listStyleType","listStylePosition","role","displayName","marginStart","li","item","borderWidth","alignSelf","borderColor","height"],"sourceRoot":""}